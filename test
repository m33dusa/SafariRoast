<html>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<!-- Logo -->
<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css"
integrity="sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf"
crossorigin="anonymous">
<i class="fab fa-android"></i></link>
<link rel="stylesheet"
href="https://fonts.googleapis.com/css?family=Coiny|Roboto|Merriweather|Ubuntu|Aleo|Anton|Abril+Fatface|Indie+Flower|Permanent+Marker">


<style>

body {
  font-family: Merriweather;
  font-size: 18px;
}

/*{box-sizing:border-box;}*/

i,link {
  font-size: 100px;
  color: green;
  float: left;
}

div i{
  font-size:19px;
  color:black;
  margin-bottom:10px;
}

h1 {
  font-size: 30px;
  text-transform: Uppercase;
  font-family: Abril Fatface, sans-serif, Helvetica;
  letter-spacing: 2px;
  color: black;
  display: inline;
  position: relative;
}

nav {
  text-align: center;
}

nav li {
  list-style: none;
  display: inline;
}

span a:link,
span a:visited,
span a{
  color:blue;
  border:none;
  background-color:#E3E6E3;
}

a,
a:visited {
  font-family: Aleo;
  background-color: #7e9e97;
  border: 1px solid black;
  color: black;
  padding: 4px 4px 4px 4px;
  border-radius: 20px;
}

a:hover,
a:active {
  background-color: #9e9e97;
}

button {
  width: 100%;
  height: 35px;
  box-shadow: 12px 12px 13px #888888;
  line-height: 35px;
  background: #7e9e97;
  text-align: center;
  font-family: Abril Fatface;
  font-size: 18px;
  text-transform: Uppercase;
  cursor: pointer;
}

.active,
button:hover {
  background-color: #9e9e97;
}

button:before {
  font-family: "Glyphicons Halflings";
  content: "\261F";
  float: right;
  transition: all 0.5s;
}

.box{
  width: 100%;
  padding:20px 0px 10px 0px;
  background-color: #E3E6E3;
}

.box:before {
  -webkit-transform: rotate(180deg);
  -moz-transform: rotate(180deg);
  transform: rotate(180deg);
}

.viewBox,
.viewBoxA,
.viewBoxB,
.viewBoxC,
.viewBoxD,
.viewBoxE,
.viewBoxF {
  overflow: visible;
  display: none;
}

@media screen and (max-width: 600px)
}

.resize {
  height:20%;
  width:20%;
}

 #li{
  margin-bottom:20px;
}


ul.c{
  list-style-type:upper-roman;
}

img{
  width: 25em;
}

img:hover{
  width:90%;
}

</style>

<body>

  <div>
    <h1> A Quick Guide to Android Studio</h1>
  </div>

  <!-- Navigation bar -->
<header>
  <div>
    <nav>
      <ul>
        <li><a onClick="dropFunction()">Overview</a></li>
        <li><a onClick = "dropFunctionA()">Installation</a></li>
        <li><a onClick = "dropFunctionB()">Key Concepts</a></li>
        <li><a onClick = "dropFunctionC()">How-To Guide</a></li>
        <li><a onClick = "dropFunctionD()">Tutorial</a></li>
        <li><a onClick = "dropFunctionE()">Vocabulary</a></li>
        <li><a onClick = "dropFunctionF()">Resources</a></li>
      </ul>
    </nav>
  </div>
</header>

  <button onclick="dropFunction()">Overview</button>
  <div class="box" id="viewBox">
    <strong>What is Android Studio?</strong>
    <p>Android Studio is a <span ><a>Java</a></span>-based <span><a>operating system </a></span>developed by google and is the official Integrated Development Environment <span><a>("IDE")</a></span> for developing Android <span><a>applications</a></span>. Android Studio is based on
      IntelliJ IDE, on top of IntelliJ's powerful code editor and developer tools, Android Studio offers even more features that enhance productivity when building Android applications.
      <p>
        The latest version of Android Studio is available for download <span><a href="https://developer.android.com/sdk/installing/studio.html" target="blank">here.<span></a></p>
    </p>
  </div>

  <button onclick="dropFunctionA()">Installation</button>
  <div class="box" id="viewBoxA"><strong>How to Install Android Studio?</strong><br>
    <div>
      <p> Before you can install Android Studio on your device, you need to have Java and the Java SDK already installed on your operating system. If you already have <span><a href="https://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html" target="_blank">Java</a></span> and the <span><a href="https://www.oracle.com/technetwork/es/java/javasebusiness/downloads/index.html" target="_blank">Java SDK</a></span> on your operating system, make sure they are the most recent versions available by the distributor. You can download both from the Oracle website.</p>
        </div>

    <div>
    <ul>
        <div style="padding:0px, 10px, 0px; float:left; overflow:auto">
    <img alt="android" src="https://images.idgesg.net/images/article/2019/02/figure1-100788003-orig.jpg"> </img></div>
        <li style="margin-bottom:20px">To get started, you can download the latest version of the Android Studio Java Development Kit ("JDK") <span><a href="https://developer.android.com/sdk/installing/studio.html" target="blank">here.</a></span></li>

        <li style="margin-bottom:20px">A version of the Android Studio JDK is available for various computing platforms, including Windows, Mac OS X and Linux. Make sure your platform is up-to-date and meets all the necessary requirements for the latest version of the JDK you are downloading.</li>

            <li style="margin-bottom:20px">Once you have downloaded the toolkit from the website, an Android Studio Setup dialog box will pop-up. Click through the “Next” button and go through the “Configuration Settings".</li>

            <li style="margin-bottom:20px">As you click through the steps towards setting up your Android Studio JDK, if you select the ‘default installation location’ (highly recommended), you’ll be prompted to the “Choose Start Menu Folder”, this will install the default Android Studio settings for the IDE (again, hightly recommended).</li>
        <li style="margin-bottom:20px">Once you have gone through all the steps required to and have completed installing the JDK on your computer's hard drive, you'll be ready to start coding Android Applications.</li>
        <li style="margin-bottom:20px; margin-left:30px">You can find video tutorial on how to download the Android Studio JDK <span><a href="https://www.youtube.com/watch?v=ABm5bgKIY1A" target="blank">here.</a></span></li>
      </ul>
    </div>
  </div>

  <button onclick="dropFunctionB()">Key Concepts</button>
  <div class="box" id="viewBoxB">Before we delve into using Android Studio and coding an Android application, there are some basic concepts about the AS JDK/IDE that will make coding on the platform simpler and comprehensible.
      <ul>
        <li style="margin-bottom:20px"><strong>Java: </strong>Most android applications are written using the Java programing language. The Android Studio JDK allows developers to write parts of the code for a given application using other programming languages, including <span><a>HTML</a></span>, <span><a>CSS</a></span>, <span><a>JavaScript</a></span>, <span><a>C++</a></span>, and <span><a>Kotlin</a></span>.</li>

        <li style="margin-bottom:20px"><strong>Activities: </strong>Activities is the part of the Android program that is like the window in a typical desktop application, or the “front-facing” page of a website. They are versatile and make your application dynamic and implement various functionalities. Think of activities as pages in a ebook, each page contains different information and you can jump from one page to any other linked page.</li>
         <img style="float:right" src="https://i0.wp.com/www.simplifiedcoding.net/wp-content/uploads/2015/10/res.png?w=427&ssl=1"</img>
        <li style="margin-bottom:20px"><strong>Resources: </strong>The Resources folder in Android Studio houses several important <span class="vocab">attributes</span> that will help your application function, this includes:</li>
          <ul>
            <li>(i) images, in the “drawable” folder;</li>
            <li>(ii) strings, colors, dimensions, and styles in the “values” folder; and </li>
            <li style="margin-bottom:20px">(iii) layouts in the “layout” folder.</li></ul>

       <li style="margin-bottom:20px"><strong style="margin-bottom:20px">XML: </strong>Extensive Markup Language ("XML"), like HTML is a markup language that does not do much on its own. XML is a plain text file that is both machine and human readable and mitigates the storage and transportation of data.
        <p> XML files begin with the XML declaration <span style="font-style:italic">?xml version="1.0" encoding="UTF-8"?</span> which is a flag that contain the (i) XML version information, (ii) the character encoding being used, and (iii) if the document needs or utilizes external sources.</p>
        </li>
       <li style="margin-bottom:20px"><strong>Widgets: </strong>Widgets are “micro” component of the Activity, they help stylize and enhance <span><a>user interface</a></span> in the Activities. For example, buttons, fields, labels, lists, and text boxes are all widgets that you can add to your Activity, and once enhanced with some code in the Java classes, can expand the capabilities of the Activity page and thereby your application.
<p>To access the “Widgets” functions on the Android Studio JDK, open the “Res” (Resources) folder, click on the “Layout” subfolder and clicking on an XML layout. Once you open a layout XML, you’ll have the option to add and stylize Widgets to the layout by using the “Palette” and “Attributes” side bars.</p></li>
        <li style="margin-bottom:20px"><strong>Layout: </strong>Layout managers use container classes to tell Android how different Activities, Widgets and Fragments interact with one another. The layout container in Android Studio is similar to "div", "span" or "Table" in HTML. At the bottom of the Layout view are two tabs, the "Text" tab, which shows you the xml code for your application and the "Design" tab, which shows you the visual representation of your code.

          <p>The layout includes the following components (1) Palette, (2) Component Tree, (3) Toolbar, (4) Design editor, and (5) Attributes.</p>

        <p> You can read more about the Layout file <span><a href="https://developer.android.com/studio/write/layout-editor" target="blank">here.</a></span></li>
     <img class="bigger"style="font-align:center" src="https://developer.android.com/studio/images/write/layout-editor-callouts_2x.png"</img>
    </ul></div>
</div>

  <button onclick="dropFunctionC()">Guides</button>
<div class="box" id="viewBoxC">
  <div><strong>The Application Package</strong>
    <p>
	A package contains the source code for your application. The Android Studio JDK creates a default package when you start a new application. The default package contains an "app" folder and a "gradle Scripts" folder.</p>

	<img class="bigger"style="float:right" src="https://i.ytimg.com/vi/a4Nd8W-PIqw/maxresdefault.jpg"</img>

    <div style="font-style:italic">Folders</div>
   <p>
      The App folder contains a “manifest” folder, a “java” folder, a "generatedJava" folder and a "res" folder. We will examine what each of these folders contain and the sort of work you can expect to person in each.</p>
<ul>
  <li style="margin-bottom:20px; margin-top:20px;">The manifest file, “AndroidManifest.xml” file is required for every application and the Android Studio automatically generates the Manifest file and some of the essential elements required to successfully run your application. You can read more about the Manifest file <span><a href="https://developer.android.com/guide/topics/manifest/manifest-intro" target="blank">here</a></span>. </li>
  <li style="margin-bottom:20px; margin-top:20px;">The “java” folder contains your classes. </li>
	<li style="margin-bottom:20px; margin-top:20px;">A source “src” folder that contains a “Android Test” sub-folder, and a “Main” sub folder, which in turn contains a “java” sub folder, a resources “res” sub folder and an “AndroidManifest.xml” sub folder. </li></ul>

      <p style="margin-bottom:20px">The “gradle” folder, contains files that handle compiling, testing, deploying and converting your code. Simply put, Gradle automates the process required to organize all the different parts of our code into a compressed file, going from the original source code to binary code and testing the binary code. The Android Studio JDK comes with two pre-loaded gradle files for each project, build.gradle (Project: YourProjectName) and build.gradle (Module:app). Subsequent gradle folders are created as you expand your code. </p></div>

  <div>
    <img class="bigger"style="float:right" src="https://i.stack.imgur.com/U2mYd.jpg"</img>
    <div style="font-style:italic">The Emulator</div>
    <p>The Android Studio emulator is an downloadable component that allows you to simulate an android device on your computer in order to test your application virtually. You can install the Android Emulator by going to “Tools” and selecting “SDK Manager”. This will launch a new window, go to the “System Settings” tab and click on “Android SDK” to ensure that you have the “Android SDK Build-Tools” installed.</p>

      <p>Then click on “Tools", “Android AVD Manager" and press the “Create Virtual Device” to create your emulator. </p></p></div>
</div>

  <button onclick="dropFunctionD()">Tutorial</button>
  <box id="viewBoxD">
    <img class="bigger"style="float:left" src="https://www.oodlesstudio.com/wp-content/uploads/Basic-Android-Layouts.png"</img>

    <div>
    <br><strong>
      Let’s Built a basic application:</strong></div>
<div style="margin-bottom:30px">

  <ol>
    <li id="li">
Open Android Studio. On the “Welcome To Android Studio” display window, click on “+ Start a New Android Studio Project” </li>

    <li id="li">This will prompt you to a new page with pre designed templates. Click on “Basic Activity”. Designate a title for your application in the “Name” column.</li>

    <div>
      <ul>
<li type="square" id="li">
You can also specify where you want your application package to save on your desktop and the programing language you prefer to use when coding your application. The default programing language is “java” and for this tutorial, we will be using the “java” programming language.</li></ul></div>

  <li id="li">A new “window” will launch, where you will perform all the basic functions that you’ll need to build your application. On the left side of the window are a series of closed tabs. Click on the “project” tab to get access to the folders that encompass the many parts of your application.</li>

    <li id="li">
Click on the “app” folder, then get each of the subsequent folders to get a sense of what they do. The major folders you will be working out of include the: “java” folder, the “res” folder and it’s subfolders (layout, menu, values and possibly drawables”).</li>

    <li id="li">
As you click through each older, you should see a visual representation of the content in the folder displayed in the middle of the window. This is not the emulator, but it helps you get a sense of what your application looks lie.
      </li>

  <li id="li">To the far right, you’ll see two closed tabs, “Palette” and “Attributes”. These will provide you with the resources to stylize your application.</li>

<li id="li">Click on the layout folder. Click on the “content_main.xml” file. Delete the “Hello World” text box in the middle of the page.</li>

    <li id="li">On the “Palette” tab you can add features such as buttons, other types of text containers, navigation bars and so on, to your application. </li>
     <div>
       <img class="bigger"style="float:right" src="https://raw.githubusercontent.com/pluralsight/guides/master/images/ed018559-eaec-4235-a6d8-2562acc39cee.png"</img>

      <ul>
<li type="square" id="li">
	Editing values:
There are several ways to edit values such as “strings”, “color", and “text size” on the Android Application. You can edit some of this content through the “Attributes” tab, but this can be limiting and is not always available for every feature you may include in your application. Another way to edit the values of attributes and content on your application, is to open the “values” folder, go to the type of value you want to change, so for example if you want to change colors, you’ll go to the colors.xml, if you want to change the string values, go to the strings.xml. You can use the dimens.xml to handle font size, object parameters and more. </li>

<li type="square" id="li">
Once you have inputed the values you want to use, you’ll need to retrieve them from the values folder to your parent application. To do this, go to the layout folder, access the layout you want to add the value to. At the bottom of the page, click on the “Text” tab. This will change the view so that you are no longer seeing the visual representation of your application, but the source code. Here, you can call the value you want, add the new features, expand on the current features you have and so much more. </li>

    <li type="square" id="li">
So for example if you want to change the background color of a button feature you have added to your application from the “Palette”, you’ll go to the section of your code that is tagged "button" and add the following snippet of code:
      <p>android:background=“@color/color_from_color_value.xml”</p> </li>
        </li>
       </ul>
    <div>

    <li id="li">
Once you are done adding features and attributes to your application, you can test the function and appearance of your application by clicking the green triangle button at the top of the navigation bar for the Android Studio JDK. This will launch the emulator and demonstrate how your application will function on a “real” Android device. </li>

    <img class="bigger"style="float:right" src="https://i.ytimg.com/vi/Ficj7igoos8/maxresdefault.jpg"</img>

     <li id="li">
As you work on your android application, expanding on the already existing features and adding new functionality to your application, here are some quick tips that can help you along the way:</li>

        <ul>
<li type="square" id="li">
        Debug - Android Studio provides developers with the ability to run a debugger which helps capture errors and potential errors in your application. Debuggers are great for fixing problems you might run into with your code.</li>

      <li type="square" id="li">
    Version Control - Most of us learned about saving drafts of our work back in elementary school. When writing your code it is imperative that you implement some sort of "version-control" method to help you keep track of your progress.</li>

      <li type="square" id="li">
    GitHub - Upload your source code onto GitHub to help you maintain and preserve your code. Using Git is a great way to streamline/simplify four version-control since Git can automatically mark changes that occur on your application.</li>

       </ul>

  </ol></div></box>

  <button onclick="dropFunctionE()">Vocabulary</button>
  <div class="box" id="viewBoxE">
    <div style="margin-bottom:20px"><strong>Application:</strong> A software application is a program or collection of programs designed to perform certain functions, tasks, or activities for an end-user.
    </div>
    <div style="margin-bottom:20px"><strong>C++:</strong> C++ is an object oriented programming language, as one of the most powerful programming langauges in the world, it is widely used. You can learn more about C++ with <span><a href="https://www.codecademy.com/learn/learn-c-plus-plus" target="blank">CodeAcademy</a></span>.
    </div>
    <div style="margin-bottom:20px"><strong>CSS:</strong> Cascading Style Sheets ("CSS") is a language that describes the style of an HTML document. <span><a href="https://www.w3schools.com/css/" target="blank">w3schools.com</a></span> offers basic CSS training.
    </div>

    <div style="margin-bottom:20px"><strong>Hardware:</strong> A computer's hardware are the physical components that make up a computer or electronic system and could include, monitors, hard drives, CPUs, keyboard, and mouse.
    </div>
    <div style="margin-bottom:20px"><strong>HTML:</strong> Hypertext Markup Language ("HTML") is the standard language used for creating web pages.
    </div>
    <div style="margin-bottom:20px"><strong>IDE:</strong> An Integrated Development Environment is a software that contains a text-editor (for writing your code), a bebugger and tools for running applications.
    </div>
    <div style="margin-bottom:20px"><strong>Java:</strong> Java is one of the most popular object oriented programming languages that uses. Java evolved from C++. Java is the most secure programming language, reliable, easy to use, and platform independent.
      <p>Learn some java basics with <span><a href="https://www.codecademy.com/learn/learn-java" target="blank">CodeAcademy.</span></a></p>
    </div>
    <div style="margin-bottom:20px"><strong>JavaScript:</strong> Javascript is a high-level interpreted programming language and was the first scripting language supported by web browsers. Javascript, HTML and CSS together make up the core technologies of the WWW.
    </div>
    <div style="margin-bottom:20px"><strong>Kotlin:</strong> Kotlin is an open source object-oriented programming language developed by JetBrains to outperform Java. Kotlin is supported by Google for Android mobile development.
    </div>
    <div style="margin-bottom:20px">
      <strong>Operating System:</strong> An OS is a software/program (usually large) that manages and controls the hardware of other software/program on a computer, this includes enabling the hardware to communicate and operate wih the software/program.</div>
      <div style="margin-bottom:20px"><strong>User Interface:</strong> The User Inferface ("UI") defines the space and or mechanisms where the user and a machine interact.
    </div>
  </div>

  <button onclick="dropFunctionF()">Resources</button>
  <div ="box" id="viewBoxF">

    <h2>How to Install Android Studio</h2>

<iframe width="560" height="315" src="https://www.youtube.com/embed/JdULMnwEs-A" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

    <h2>Sample Android Studio</h2>
    <iframe width="560" height="315" src="https://www.youtube.com/embed/dFlPARW5IX8" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
      </div>

    <script>
    /*Overview box*/
  window.onscroll = function() {myFunction()};
    function dropFunction() {
      var x = document.getElementById("viewBox");
      if (x.style.display === "none") {
        x.style.display = "block";
      } else {
        x.style.display = "none";
      }
    }

    /*Installation box*/
    function dropFunctionA() {
      var x = document.getElementById("viewBoxA");
      if (x.style.display === "none") {
        x.style.display = "block";
      } else {
        x.style.display = "none";
      }
    }

    /*Key Concepts box*/
    function dropFunctionB() {
      var x = document.getElementById("viewBoxB");
      if (x.style.display === "none") {
        x.style.display = "block";
      } else {
        x.style.display = "none";
      }
    }

    /*Guides box*/
    function dropFunctionC() {
      var x = document.getElementById("viewBoxC");
      if (x.style.display === "none") {
        x.style.display = "block";
      } else {
        x.style.display = "none";
      }
    }

    /*Tutorial box*/
    function dropFunctionD() {
      var x = document.getElementById("viewBoxD");
      if (x.style.display === "none") {
        x.style.display = "block";
      } else {
        x.style.display = "none";
      }
    }

    /*References box*/
    function dropFunctionE() {
      var x = document.getElementById("viewBoxE");
      if (x.style.display === "none") {
        x.style.display = "block";
      } else {
        x.style.display = "none";
      }
    }

    /*Resources box*/
    function dropFunctionF() {
      var x = document.getElementById("viewBoxF");
      if (x.style.display === "none") {
        x.style.display = "block";
      } else {
        x.style.display = "none";
      }
    }
    </script>
  </body>
</html>
